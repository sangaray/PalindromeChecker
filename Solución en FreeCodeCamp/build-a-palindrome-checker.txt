** start of index.html **

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Palindrome Checker</title>
  <link rel="stylesheet" href="styles.css">
  <script defer src="script.js"></script>

</head>

<body>

  <div class="container">
    <div class="header">
      <h1 class="title">Check is your text is a Palindrome?</h1>
    </div>

    <div class="input-container">
      <label class="input-label">Enter the text you want to check:</label>
      <div class="input-group">
        <input type="text" id="text-input" placeholder="Enter text here...">
        <button id="check-btn">Check</button>
      </div>
      <div id="result"></div>
    </div>

    <div class="definition">
      <span class="definition-icon">ðŸ’¡</span>
      <span class="definition-text">
        A <span class="definition-highlight">palindrome</span> is a word or sentence that's spelled the same way both
        forward and backward, ignoring punctuation, case, and spacing.
      </span>
    </div>
  </div>
</body>

</html>

** end of index.html **

** start of script.js **

document.addEventListener('DOMContentLoaded', function() {

    const textInput = document.getElementById("text-input");
    const checkBtn = document.getElementById("check-btn");
    const result = document.getElementById("result");

    function isPalindrome(str) {
        const cleaned = str.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
        return cleaned === cleaned.split("").reverse().join("");
    }

    function checkPalindrome() {
        const inputValue = textInput.value.trim();
        
        if (inputValue === "") {
            alert("Please input a value");
            return;
        }
        
        const palindromeCheck = isPalindrome(inputValue);
        
        if (palindromeCheck) {
            result.textContent = `${inputValue} is a palindrome.`;
            result.className = "result-animation palindrome-result";
        } else {
            result.textContent = `${inputValue} is not a palindrome.`;
            result.className = "result-animation not-palindrome-result";
        }
    }

    checkBtn.addEventListener("click", checkPalindrome);
    
    textInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
            checkPalindrome();
        }
    });
    
    textInput.addEventListener("input", function () {
        result.textContent = "";
        result.className = "";
    });
});

** end of script.js **

** start of styles.css **

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
}

.container {
  text-align: center;
  max-width: 800px;
  width: 90%;
  padding: 2rem;
  border: 2px solid #ffffff33;
  border-radius: 1rem;
  box-shadow: 0 5px 20px rgba(106, 105, 105, 0.5);
}

.header {
  margin-bottom: 3rem;
}

.title {
  font-size: 2.5rem;
  font-weight: bold;
  color: #e0e0e0;
  margin-bottom: 2rem;
}

.input-container {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 1rem;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.input-label {
  font-size: 1.2rem;
  margin-bottom: 1.5rem;
  color: #b0b0b0;
  display: block;
}

.input-group {
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
}

#text-input {
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 10px;
  padding: 15px 20px;
  font-size: 1.1rem;
  color: white;
  width: 400px;
  outline: none;
  transition: all 0.3s ease;
}

#text-input::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

#text-input:focus {
  border-color: #6c5ce7;
  box-shadow: 0 0 20px rgba(108, 92, 231, 0.3);
  background: rgba(255, 255, 255, 0.15);
}

#check-btn {
  background: linear-gradient(135deg, #6c5ce7 0%, #a855f7 100%);
  border: none;
  border-radius: 10px;
  padding: 15px 30px;
  font-size: 1.1rem;
  font-weight: bold;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(108, 92, 231, 0.4);
}

#check-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(108, 92, 231, 0.6);
  background: linear-gradient(135deg, #5a4fcf 0%, #9333ea 100%);
}

#check-btn:active {
  transform: translateY(0);
}

#result {
  margin-top: 2rem;
  font-size: 1.3rem;
  font-weight: bold;
  min-height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #e0e0e0;
}

.definition {
  background: rgba(34, 139, 34, 0.2);
  border-left: 4px solid #22b14c;
  border-radius: 10px;
  padding: 1.5rem;
  margin-top: 2rem;
  text-align: left;
}

.definition-icon {
  color: #ffd700;
  font-size: 1.2rem;
  margin-right: 0.5rem;
}

.definition-text {
  font-size: 1.1rem;
  line-height: 1.6;
  color: #d0d0d0;
}

.definition-highlight {
  font-style: italic;
  color: #a855f7;
  font-weight: bold;
}

@media (max-width: 600px) {
  .title {
    font-size: 2.5rem;
  }

  .input-group {
    flex-direction: column;
  }

  #text-input {
    width: 100%;
  }
}

/* Animation for result */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.result-animation {
  animation: fadeIn 0.5s ease-out;
}

.palindrome-result {
  color: #22b14c !important;
}

.not-palindrome-result {
  color: #ff6b6b !important;
}


** end of styles.css **

